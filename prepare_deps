#!/usr/bin/env bash

# Prerequisites:
# - Changed to relevant directory for downloading and building dependencies.
# - GNU Bash (at least v3.1 for the '+=' string-concatenation operator).
# - Latest GCC ('gcc' and 'g++') available in PATH.
# - Environment variables:
#   - BOOST_DIR: Absolute or relative directory to Boost repo clone.
#   - GTEST_DIR: Absolute or relative directory to Google Test repo clone.
#   - HUNSPELL_DIR: Absolute or relative directory to Hunspell repo clone.
#   - CRYPTOPP_DIR: Absolute or relative directory to Crypto++ repo clone.
#   - OPENSSL_DIR: Absolute or relative directory to OpenSSL repo clone.
#   - GNU_MAKE: Executable name of GNU Make (at least v4.2.1).
#   - BAZEL: Executable name of Bazel.
#   - GIT: Executable name of Git (relatively modern version with submodules).
#   - AR: Executable name of GCC's 'ar' tool. (Unnecessary on macOS.)
#   - RANLIB: Executable name of GCC's 'ranlib' tool. (Unnecessary on macOS.)
#   - CLEAN_BUILD: (Optional) Clean up existing build artifacts before building.

function build_boost {
    # The Travis Cache plugin creates the directories beforehand, so we can't
    # use [[ ! -d $dir ]] here
    if [[ ! -x $BOOST_DIR/bootstrap.sh ]]
    then
        $GIT clone --jobs 4 https://github.com/boostorg/boost.git $BOOST_DIR
        pushd $BOOST_DIR
    else
        pushd $BOOST_DIR
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
        fi
    fi
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    ./bootstrap.sh --with-toolset=gcc
    ./b2 headers
    ./b2 --layout=system toolset=gcc variant=release address-model=64 -j 2 \
         --with-system
}

function build_gtest {
    if [[ ! -f $GTEST_DIR/BUILD.bazel && ! -f $GTEST_DIR/WORKSPACE ]]
    then
        $GIT clone --jobs 4 https://github.com/google/googletest.git $GTEST_DIR
        pushd $GTEST_DIR
    else
        pushd $GTEST_DIR
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
        fi
    fi
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    system_name=`uname -s`
    if [[ $system_name =~ ^MINGW ]]
    then
        compiler_override="--compiler=mingw-gcc"
    elif [[ $system_name =~ ^MSYS_ ]]
    then
        compiler_override="--compiler=msys-gcc"
    fi
    $BAZEL build $compiler_override gtest gtest_main
    $BAZEL shutdown
}

function build_hunspell {
    if [[ ! -f $HUNSPELL_DIR/configure.ac ]]
    then
        $GIT clone --jobs 4 https://github.com/hunspell/hunspell.git \
             $HUNSPELL_DIR
        pushd $HUNSPELL_DIR
    else
        pushd $HUNSPELL_DIR
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
            rm config.cache
        fi
    fi
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    export LDFLAGS=-L/usr/local/opt/gettext/lib
    export CPPFLAGS=-I/usr/local/opt/gettext/include
    autoreconf -vfi
    ./configure --config-cache --disable-dependency-tracking
    $GNU_MAKE -kj 2
}

function build_cryptopp {
    if [[ ! -f $CRYPTOPP_DIR/GNUmakefile ]]
    then
        $GIT clone --jobs 4 https://github.com/weidai11/cryptopp.git \
             $CRYPTOPP_DIR
        pushd $CRYPTOPP_DIR
    else
        pushd $CRYPTOPP_DIR
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
        fi
    fi
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    $GNU_MAKE deps
    $GNU_MAKE -kj 3
}

function build_openssl {
    if [[ ! -f $OPENSSL_DIR/config ]]
    then
        $GIT clone --jobs 4 https://github.com/openssl/openssl.git $OPENSSL_DIR
        pushd $OPENSSL_DIR
    else
        pushd $OPENSSL_DIR
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
        fi
    fi
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    CC=gcc CXX=g++ ./config --prefix=`pwd`
    $GNU_MAKE -kj 3
    [[ -d lib ]] || mkdir lib
    pushd lib
    ln -fs ../libssl.* ../libcrypto.* .
}

function download_scowl_for_hunspell {
    url='https://downloads.sourceforge.net/project/wordlist/speller/2017.01.22/'
    url+='hunspell-en_US-2017.01.22.zip?r=https%3A%2F%2Fsourceforge.net%2F'
    url+='projects%2Fwordlist%2Ffiles%2Fspeller%2F2017.01.22%2F&ts=1486860415'
    url+='&use_mirror=vorboss'
    wget "$url" -O hunspell-en_US-2017.01.22.zip
    unzip -o -d $HUNSPELL_DIR hunspell-en_US-2017.01.22.zip
    rm hunspell-en_US-2017.01.22.zip
}

if [[ "$BOOST_DIR" == "" ]]
then
    echo "The BOOST_DIR variable must be set to where you cloned Boost" >&2
    exit 1
elif [[ "$GTEST_DIR" == "" ]]
then
    echo "The GTEST_DIR variable must be set to where you cloned Google Test" \
         "and Google Mock" >&2
    exit 1
elif [[ "$HUNSPELL_DIR" == "" ]]
then
    echo "The HUNSPELL_DIR variable must be set to where you cloned Hunspell" \
         >&2
    exit 1
elif [[ "$CRYPTOPP_DIR" == "" ]]
then
    echo "The CRYPTOPP_DIR variable must be set to where you cloned Crypto++" \
         >&2
    exit 1
elif [[ "$OPENSSL_DIR" == "" ]]
then
    echo "The OPENSSL_DIR variable must be set to where you cloned OpenSSL" >&2
    exit 1
elif [[ "$GIT" == "" ]]
then
    echo "The GIT variable must be set to the Git program name (or to 'true'" \
         "to avoid Git operations)" >&2
    exit 1
elif [[ "$GNU_MAKE" == "" ]]
then
    echo "The GNU_MAKE variable must be set to the GNU Make v4.2.1 program" \
         "name" >&2
    exit 1
elif [[ "$BAZEL" == "" ]]
then
    echo "The BAZEL variable must be set to the Bazel program name" >&2
    exit 1
fi

set -xe
build_boost &
build_gtest &
build_hunspell &
build_cryptopp &
build_openssl &
download_scowl_for_hunspell &
wait
