#!/usr/bin/env bash

# Prerequisites:
# - GNU Bash (at least v3.1 for the '+=' string-concatenation operator).
# - Latest GCC ('gcc' and 'g++') available in PATH.
# - Environment variables:
#   - BOOST_DIR: Absolute or relative directory to Boost repo clone.
#   - GTEST_DIR: Absolute or relative directory to Google Test repo clone.
#   - HUNSPELL_DIR: Absolute or relative directory to Hunspell repo clone.
#   - CRYPTOPP_DIR: Absolute or relative directory to Crypto++ repo clone.
#   - OPENSSL_DIR: Absolute or relative directory to OpenSSL repo clone.
#   - GNU_MAKE: Executable name of GNU Make (at least v4.2.1).
#   - BAZEL: Executable name of Bazel. (Set to "true" for Makefile workaround.) 
#   - GIT: Executable name of Git (relatively modern version with submodules).
#   - AR: Executable name of GCC's 'ar' tool. (Unnecessary on macOS.)
#   - RANLIB: Executable name of GCC's 'ranlib' tool. (Unnecessary on macOS.)
#   - CLEAN_BUILD: (Optional) Clean up existing build artifacts before building.
export BOOST_DIR=${BOOST_DIR:-boost}
export GTEST_DIR=${GTEST_DIR:-googletest}
export HUNSPELL_DIR=${HUNSPELL_DIR:-hunspell}
export CRYPTOPP_DIR=${CRYPTOPP_DIR:-cryptopp}
export OPENSSL_DIR=${OPENSSL_DIR:-openssl}
export GNU_MAKE=${GNU_MAKE:-make}
export BAZEL=${BAZEL:-true}
export GIT=${GIT:-git}
if [[ $(uname) != "Darwin" && $(uname -o) != "Android" ]]
then
    export AR=${AR:-gcc-ar}
    export RANLIB=${RANLIB:-gcc-ranlib}
fi

function checkout {
    local repoURL="$1"
    local dir="$2"
    local branch="$3"
    local testFiles="$4"
    shift 4

    # The Travis Cache plugin creates the directories beforehand, so we can't
    # use [[ ! -d $dir ]] here
    if echo -e "$testFiles" | xargs -t -n1 -I% [ ! -f "$dir"/% ]
    then
        $GIT clone --depth 1 --shallow-submodules --no-tags $repoURL "$dir"
        pushd "$dir"
    else
        pushd "$dir"
        if [[ -n "$CLEAN_BUILD" ]]
        then
            $GIT clean --force -Xd
            $GIT checkout --force "$branch"
        fi
        $GIT pull --prune
    fi
    $GIT submodule update --init --recursive --depth 1 -- $@
}

function build_boost {
    checkout https://github.com/boostorg/boost.git \
             "$BOOST_DIR" \
             master \
             bootstrap.sh \
         tools/build libs/config tools/boost_install libs/headers \
         libs/algorithm \
         libs/align \
         libs/asio \
         libs/assert \
         libs/beast \
         libs/bind \
         libs/concept_check \
         libs/container_hash \
         libs/core \
         libs/date_time \
         libs/describe \
         libs/detail \
         libs/endian \
         libs/function \
         libs/integer \
         libs/intrusive \
         libs/io \
         libs/iostreams \
         libs/iterator \
         libs/move \
         libs/mp11 \
         libs/mpl \
         libs/numeric \
         libs/optional \
         libs/predef \
         libs/preprocessor \
         libs/range \
         libs/scope_exit \
         libs/smart_ptr \
         libs/static_assert \
         libs/static_string \
         libs/system \
         libs/throw_exception \
         libs/type_index \
         libs/typeof \
         libs/type_traits \
         libs/utility \
         libs/winapi
    ./bootstrap.sh --with-toolset=gcc
    ./b2 headers
    ./b2 --layout=system toolset=gcc variant=release address-model=64 -j 2 \
         --with-system
}

function build_gtest {
    checkout https://github.com/google/googletest.git \
             "$GTEST_DIR" \
             main \
             "BUILD.bazel\nWORKSPACE"
    if [[ $BAZEL != "true" ]]
    then
        system_name=$(uname -s)
        if [[ $system_name =~ ^MINGW ]]
        then
            compiler_override="--compiler=mingw-gcc"
        elif [[ $system_name =~ ^MSYS_ ]]
        then
            compiler_override="--compiler=msys-gcc"
        fi
        compiler_override+=" --cxxopt=-std=c++14"
        $BAZEL --batch build $compiler_override gtest gtest_main
    else
        git fetch --shallow-since=2019-06-12 || git fetch --unshallow || true
        git checkout 6b8c138154~1 -- googletest/make
        pushd googletest/make
        echo -e '*.o\n*.a\nsample1_unittest' > .gitignore
        $GNU_MAKE -kj 2 CXXFLAGS="-g -Wall -Wextra -pthread -std=c++14"
        popd
        [[ -d bazel-bin ]] || mkdir bazel-bin
        pushd bazel-bin
        ln -fs ../googletest/make/*.a .
    fi
}

function build_hunspell {
    checkout https://github.com/hunspell/hunspell.git \
             "$HUNSPELL_DIR" \
             master \
             configure.ac
    if [[ -n "$CLEAN_BUILD" ]]
    then
        rm -f config.cache
    fi
    if [[ -z `command -v autopoint` &&
          `uname` == Linux && `uname -o` != Android &&
          `lsb_release -s -i` == Ubuntu ]]
    then
        sudo apt install -y autopoint
    fi
    export LDFLAGS=-L/usr/local/opt/gettext/lib
    export CPPFLAGS=-I/usr/local/opt/gettext/include
    autoreconf -vfi
    ./configure --config-cache --disable-dependency-tracking
    $GNU_MAKE -kj 2
}

function build_cryptopp {
    checkout https://github.com/weidai11/cryptopp.git \
             "$CRYPTOPP_DIR" \
             master \
             GNUmakefile
    if [[ `uname -o` == Android ]]
    then
        pkg install libcpufeatures
        export CRYPTOPP_CPPFLAGS=-I/data/data/com.termux/files/usr/include/ndk_compat
        export CRYPTOPP_LDFLAGS=-lndk_compat
    fi
    $GNU_MAKE deps
    $GNU_MAKE -kj 3
}

function build_openssl {
    if [[ -n "$CLEAN_BUILD" ]]
    then
        pushd "$OPENSSL_DIR"
        $GIT config core.eol lf
        $GIT config core.autocrlf false
        popd
    fi
    local optsAndURL="--config core.eol=lf --config core.autocrlf=false"
    optsAndURL+=" https://github.com/openssl/openssl.git"
    checkout "$optsAndURL" "$OPENSSL_DIR" master config
    CC=gcc CXX=g++ ./config --prefix=$(pwd) no-async enable-makedepend
    $GNU_MAKE update -kj 4
    $GNU_MAKE -kj 4
    # https://github.com/openssl/openssl/issues/14994#issuecomment-825872628
    $GNU_MAKE -kj 4
    $GNU_MAKE -kj 4
    [[ -d lib ]] || mkdir lib
    pushd lib
    ln -fs ../libssl.* ../libcrypto.* .
}

function download_scowl_for_hunspell {
    url='https://downloads.sourceforge.net/project/wordlist/speller/2017.01.22/'
    file='hunspell-en_US-2017.01.22.zip'
    wget "$url$file" -O $file || curl -L -o $file "$url$file"
    unzip -o -d $HUNSPELL_DIR $file
    rm $file
}

set -xe
if [[ $(uname -o) != "Android" ]]
then
    git config fetch.parallel 0
    git config submodule.fetchJobs 0
fi
build_boost &
build_gtest &
build_hunspell &
build_cryptopp &
build_openssl &
download_scowl_for_hunspell &
while sleep 300
do
    echo "Dummy output to prevent termination"
done &
dummy_pid=$(jobs -p %%)
disown
wait
kill $dummy_pid
