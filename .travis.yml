# https://docs.travis-ci.com/user/customizing-the-build/
# IMPORTANT: Validate this file at http://lint.travis-ci.org/ before use!
#
# Environment Variables to set up in Travis settings:
#
# For integration with Coverity Scan (https://scan.coverity.com)
# - COVERITY_SCAN_TOKEN: The Project Token in Project Settings.
# - COVERITY_SCAN_NOTIFICATION_EMAIL: Email address to receive notifications.
#
# For integration with SonarCloud (https://sonarcloud.io)
# - SONAR_ORGANIZATION: The SonarCloud organization ID. View it in My Account ->
#                       Organizations. (For personal SonarCloud organizations of
#                       accounts linked to GitHub accounts, it would be of the
#                       form "<username>-github".)
# - SONAR_PROJECTKEY: The SonarCloud project name. View it in your organization
#                     at Administration -> Projects Management.
# - SONAR_TOKEN: Create this SonarCloud access token in My Account -> Security.
#
# For integration with Code Inspector (https://www.code-inspector.com)
# - CODE_INSPECTOR_ACCESS_KEY: The "Access key" of the API Key of your user
#                              account. This is created in User Profile.
# - CODE_INSPECTOR_SECRET_KEY: The "Secret key" of the API Key of your user
#                              account.
# - CODE_INSPECTOR_PROJECT_NAME: The name of the project in Code Inspector.
#
# Note: Encrypted environment variables aren't available to pull request builds.

language: cpp

branches:
    only:
    - master
    - /^travis-.*/

git:
    submodules: false

os:
- linux
- osx

dist: xenial
osx_image: xcode10.1

addons:
    apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8"
          key_url: "https://bazel.build/bazel-release.pub.gpg"
        packages:
        - g++-8
        - gdb
        - bazel
    coverity_scan:
        project:
            name: $TRAVIS_REPO_SLUG
            version: $TRAVIS_COMMIT
        # Coverity refuses to run on OSX due to System Integrity Protection
        # being enabled, so we need no hackery here to limit it to Linux only.
        build_command_prepend: $GNU_MAKE -k clean
        build_command: $GNU_MAKE -k
        branch_pattern: master
    sonarcloud:
        organization: $SONAR_ORGANIZATION

cache:
    directories:
    - boost
    - googletest
    - hunspell
    - cryptopp
    - openssl
    - $HOME/.sonar/cache
    - $HOME/.cache/pip
    timeout: 1000

before_cache:
  - rm -f $HOME/.cache/pip/log/debug.log

before_install:
- >-
    if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
        brew update;
        brew install make;
        brew outdated automake || brew upgrade automake;
        brew outdated libtool || brew upgrade libtool;
        brew install gettext;
        brew tap bazelbuild/tap;
        brew install bazelbuild/tap/bazel;
        export GNU_MAKE=gmake;
    else
        export GNU_MAKE=make;
        export AR=gcc-ar-8;
        export RANLIB=gcc-ranlib-8;
        if [[ "$TRAVIS_PULL_REQUEST" == "false" &&
              ! -z "$CODE_INSPECTOR_ACCESS_KEY" ]];
        then
            sudo apt-get install python3-pip python3-setuptools python3-wheel;
            pip3 install code-inspector;
        fi;
    fi
- export BAZEL=bazel
- export GIT=git
# Workaround for https://github.com/travis-ci/travis-ci/issues/3668
- mkdir -p latest-gcc-symlinks
- ln -s /usr/bin/g++-8 latest-gcc-symlinks/g++
- ln -s /usr/bin/gcc-8 latest-gcc-symlinks/gcc
- export PATH=$PWD/latest-gcc-symlinks:$PATH
- g++ --version

install:
- export BOOST_DIR=$PWD/boost
- export GTEST_DIR=$PWD/googletest
- export HUNSPELL_DIR=$PWD/hunspell
- export CRYPTOPP_DIR=$PWD/cryptopp
- export OPENSSL_DIR=$PWD/openssl
- ./prepare_deps

before_script:
- ulimit -c unlimited -S

script:
- >-
    if [[ "$TRAVIS_OS_NAME" == "osx"  &&
        ( "$TRAVIS_PULL_REQUEST" == "false" ||
            "$TRAVIS_PULL_REQUEST_SLUG" == "$TRAVIS_REPO_SLUG" ) ]];
    then
        $GNU_MAKE -k clean;
        build-wrapper-macosx-x86 --out-dir bw-output $GNU_MAKE -kj 2;
        source_dirs=(set_*);
        IFS=,;
        sonar-scanner -Dsonar.projectKey=$SONAR_PROJECTKEY \
                      -Dsonar.sources="${source_dirs[*]}" \
                      -Dsonar.cfamily.build-wrapper-output=bw-output \
                      -Dsonar.host.url='https://sonarcloud.io';
    else
        $GNU_MAKE -kj 2;
    fi
- >-
    if [[ "$TRAVIS_OS_NAME" == "linux" &&
          "$TRAVIS_PULL_REQUEST" == "false" &&
          ! -z "$CODE_INSPECTOR_ACCESS_KEY" ]];
    then
        code-inspector-analyze -p "$CODE_INSPECTOR_PROJECT_NAME";
    fi
- export HUNSPELL_AFFIX_PATH=$HUNSPELL_DIR/en_US.aff
- export HUNSPELL_DICT_PATH=$HUNSPELL_DIR/en_US.dic
- >-
    if [[ "$TRAVIS_OS_NAME" == "linux" ]];
    then
        export SSL_CERT_DIR=/etc/ssl/certs;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
        security export \
            -k /System/Library/Keychains/SystemRootCertificates.keychain \
            -t certs \
            -p \
            > certs.pem;
        export SSL_CERT_FILE=`pwd`/certs.pem;
    fi
- ./test

after_failure:
# http://jsteemann.github.io/blog/2014/10/30/getting-core-dumps-of-failed-travisci-builds/
- coreFile=$(find . -maxdepth 1 -name "*core*" | head -n 1)
- >-
    if [[ -f "$coreFile" ]];
    then
        gdb -c "$coreFile" test \
            -ex "thread apply all bt" \
            -ex "set pagination 0" \
            -batch;
    fi
