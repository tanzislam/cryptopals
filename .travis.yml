# Environment Variables to set up in Travis settings:
#
# For integration with Coverity Scan (https://scan.coverity.com)
# - COVERITY_SCAN_TOKEN: The Project Token in Project Settings.
# - COVERITY_SCAN_NOTIFICATION_EMAIL: Email address to receive notifications.
#
# For integration with SonarCloud (https://sonarcloud.io)
# - SONAR_ORGANIZATION: The SonarCloud organization ID. View it in My Account ->
#                       Organizations. (For personal SonarCloud organizations of
#                       accounts linked to GitHub accounts, it would be of the
#                       form "<username>-github".)
# - SONAR_PROJECTKEY: The SonarCloud project name. View it in your organization
#                     at Administration -> Projects Management.
# - SONAR_TOKEN: Create this SonarCloud access token in My Account -> Security.
# - SONAR_GITHUB_TOKEN: A personal access token of a GitHub account that will
#                       be used by SonarCloud to insert analysis results in pull
#                       requests. Create it in GitHub Settings -> Personal
#                       access tokens. It needs the public_repo and repo:status
#                       scopes.

sudo: false
language: cpp

branches:
    only:
    - master
    - /^travis-.*/

os:
- linux
- osx

dist: trusty
osx_image: xcode8.3

addons:
    apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
    coverity_scan:
        project:
            name: $TRAVIS_REPO_SLUG
            version: $TRAVIS_COMMIT
        # Coverity refuses to run on OSX due to System Integrity Protection
        # being enabled, so we need no hackery here to limit it to Linux only.
        build_command: $GNU_MAKE -k
        branch_pattern: master
    sonarcloud:
        organization: $SONAR_ORGANIZATION
        github_token: $SONAR_GITHUB_TOKEN

before_install:
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install homebrew/dupes/make; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew outdated automake || brew upgrade automake; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew outdated libtool || brew upgrade libtool; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install gettext; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export GNU_MAKE=gmake; else export GNU_MAKE=make; fi

install:
# Workaround for https://github.com/travis-ci/travis-ci/issues/3668
- mkdir -p latest-gcc-symlinks
- ln -s /usr/bin/g++-7 latest-gcc-symlinks/g++
- ln -s /usr/bin/gcc-7 latest-gcc-symlinks/gcc
- export PATH=$PWD/latest-gcc-symlinks:$PATH
- g++ --version

before_script:
- git clone https://github.com/boostorg/boost.git
- pushd boost
- git submodule update --init --recursive
- ./bootstrap.sh
- ./b2 headers
- ./b2 --layout=system variant=release --with-system --with-date_time --with-regex
- export BOOST_DIR=$PWD
- popd
- git clone https://github.com/google/googletest.git
- pushd googletest/googletest/make
- $GNU_MAKE -kj 2
- export GTEST_DIR=$PWD/../..
- popd
- git clone https://github.com/hunspell/hunspell.git
- pushd hunspell
- export LDFLAGS=-L/usr/local/opt/gettext/lib CPPFLAGS=-I/usr/local/opt/gettext/include
- autoreconf -vfi
- ./configure
- $GNU_MAKE -kj 2
- export HUNSPELL_DIR=$PWD
- popd
- git clone https://github.com/weidai11/cryptopp.git
- pushd cryptopp
- $GNU_MAKE -kj 2
- export CRYPTOPP_DIR=$PWD
- popd
- wget 'https://downloads.sourceforge.net/project/wordlist/speller/2017.01.22/hunspell-en_US-2017.01.22.zip?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fwordlist%2Ffiles%2Fspeller%2F2017.01.22%2F&ts=1486860415&use_mirror=vorboss' -O hunspell-en_US-2017.01.22.zip
- unzip -d hunspell hunspell-en_US-2017.01.22.zip
- rm hunspell-en_US-2017.01.22.zip

script:
- $GNU_MAKE -k clean
- build-wrapper-linux-x86-64 --out-dir bw-output $GNU_MAKE -k
- sonar-scanner -Dsonar.projectKey=$SONAR_PROJECTKEY -Dsonar.sources=set_1_basics,set_2_block_crypto -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.host.url='https://sonarcloud.io'
- export HUNSPELL_AFFIX_PATH=$HUNSPELL_DIR/en_US.aff
- export HUNSPELL_DICT_PATH=$HUNSPELL_DIR/en_US.dic
- ./test
