# https://docs.travis-ci.com/user/customizing-the-build/
#
# Environment Variables to set up in Travis settings:
#
# For integration with Coverity Scan (https://scan.coverity.com)
# - COVERITY_SCAN_TOKEN: The Project Token in Project Settings.
# - COVERITY_SCAN_NOTIFICATION_EMAIL: Email address to receive notifications.
#
# For integration with SonarCloud (https://sonarcloud.io)
# - SONAR_ORGANIZATION: The SonarCloud organization ID. View it in My Account ->
#                       Organizations. (For personal SonarCloud organizations of
#                       accounts linked to GitHub accounts, it would be of the
#                       form "<username>-github".)
# - SONAR_PROJECTKEY: The SonarCloud project name. View it in your organization
#                     at Administration -> Projects Management.
# - SONAR_TOKEN: Create this SonarCloud access token in My Account -> Security.
#
# For integration with Code Inspector (https://www.code-inspector.com)
# - CODE_INSPECTOR_ACCESS_KEY: The "Access key" of the API Key of your user
#                              account. This is created in User Profile.
# - CODE_INSPECTOR_SECRET_KEY: The "Secret key" of the API Key of your user
#                              account.
# - CODE_INSPECTOR_PROJECT_NAME: The name of the project in Code Inspector.
#
# Note: Encrypted environment variables aren't available to pull request builds.

language: cpp

branches:
    only:
    - master
    - /^travis-.*/

git:
    submodules: false

os:
- linux
- osx
- windows

dist: bionic
osx_image: xcode11.3

addons:
    apt:
        sources:
        - sourceline: "ppa:ubuntu-toolchain-r/test"
        - sourceline: "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8"
          key_url: "https://bazel.build/bazel-release.pub.gpg"
        - sourceline: "deb http://archive.ubuntu.com/ubuntu focal main"
        packages:
        - -t bionic
        - g++-9
        - gdb
        - bazel
        - make/focal
    homebrew:
        update: true
        taps:
        - bazelbuild/tap
        packages:
        - make
        - automake
        - libtool
        - gettext
        - bazelbuild/tap/bazel
    coverity_scan:
        project:
            name: $TRAVIS_REPO_SLUG
            version: $TRAVIS_COMMIT
        build_command_prepend: $GNU_MAKE -k clean
        build_command: $GNU_MAKE -k
        branch_pattern: master
    sonarcloud:
        organization: $SONAR_ORGANIZATION

cache:
    directories:
    - boost
    - googletest
    - hunspell
    - cryptopp
    - openssl
    - $HOME/.sonar/cache
    - $HOME/.cache/pip
    - $HOME/Library/Caches/Homebrew
    - $HOME/AppData/Local/Temp/chocolatey
    - /C/tools/msys64
    timeout: 1000

before_cache:
- |-
    case $TRAVIS_OS_NAME in
      linux)
        rm -f $HOME/.cache/pip/log/debug.log
        ;;
      windows)
        $msys2 pacman --sync --clean --noconfirm
        echo --tcp-nodelay >> $APPDATA/.curlrc
        ;;
      osx)
        # https://stackoverflow.com/a/53331571/1433768
        brew cleanup
        ;;
    esac

before_install:
- |-
    case $TRAVIS_OS_NAME in
      osx)
        export GNU_MAKE=gmake
        export COVERITY_SCAN_BRANCH_PATTERN=disable_coverity_scan
        ;;
      linux)
        export GNU_MAKE=make
        export AR=gcc-ar-9
        export RANLIB=gcc-ranlib-9
        if [[ $TRAVIS_PULL_REQUEST == false &&
              ! -z "$CODE_INSPECTOR_ACCESS_KEY" ]]
        then
            # https://doc.code-inspector.com/ci-support.html
            sudo apt-get install python3-pip python3-setuptools python3-wheel
            pip3 install code-inspector
        fi
        # Workaround for https://github.com/travis-ci/travis-ci/issues/3668
        mkdir -p latest-gcc-symlinks
        ln -s /usr/bin/g++-9 latest-gcc-symlinks/g++
        ln -s /usr/bin/gcc-9 latest-gcc-symlinks/gcc
        export PATH=$PWD/latest-gcc-symlinks:$PATH
        ;;
      windows)
        [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
        choco uninstall -y mingw
        choco upgrade --no-progress -y msys2 bazel
        export msys2='cmd //C RefreshEnv.cmd '
        export msys2+='& set MSYS=winsymlinks:nativestrict '
        export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
        export shell="$msys2 -mingw64 -full-path -here -c \$\* --"
        export msys2+=" -msys2 -c \$\* --"
        $msys2 pacman --sync --noconfirm --needed \
                autoconf \
                automake \
                make \
                mingw-w64-x86_64-libtool \
                mingw-w64-x86_64-toolchain \
                perl \
                unzip
        taskkill //IM gpg-agent.exe //F
        export CPPFLAGS=-D__USE_MINGW_ANSI_STDIO=1
        export PATH=/C/tools/msys64/mingw64/bin:$PATH
        export GNU_MAKE=/C/tools/msys64/usr/bin/make
        export MAKE=$GNU_MAKE
        export AR=gcc-ar
        export RANLIB=gcc-ranlib
        export COVERITY_SCAN_BRANCH_PATTERN=disable_coverity_scan
        ;;
    esac
- export BAZEL=bazel
- export GIT=git
- g++ --version
- $shell $GNU_MAKE --version
- $GIT --version

install:
- export BOOST_DIR=$PWD/boost
- export GTEST_DIR=$PWD/googletest
- export HUNSPELL_DIR=$PWD/hunspell
- export CRYPTOPP_DIR=$PWD/cryptopp
- export OPENSSL_DIR=$PWD/openssl
- $GIT config --global --add submodule.fetchJobs `nproc`
- export MAKEFLAGS="-s -j `nproc`"
- $shell ./prepare_deps

before_script:
- ulimit -c unlimited -S

script:
- |-
    if [[ $TRAVIS_OS_NAME == osx  &&
        ( $TRAVIS_PULL_REQUEST == false ||
            "$TRAVIS_PULL_REQUEST_SLUG" == "$TRAVIS_REPO_SLUG" ) ]]
    then
        $GNU_MAKE -k clean
        build-wrapper-macosx-x86 --out-dir bw-output $GNU_MAKE -kj `nproc`
        source_dirs=(set_*)
        IFS=,
        sonar-scanner -Dsonar.projectKey=$SONAR_PROJECTKEY \
                      -Dsonar.sources="${source_dirs[*]}" \
                      -Dsonar.cfamily.build-wrapper-output=bw-output \
                      -Dsonar.host.url='https://sonarcloud.io'
    else
        $shell $GNU_MAKE -kj `nproc`
    fi
- |-
    if [[ $TRAVIS_OS_NAME == linux &&
          $TRAVIS_PULL_REQUEST == false &&
          ! -z "$CODE_INSPECTOR_ACCESS_KEY" ]]
    then
        code-inspector-analyze -p "$CODE_INSPECTOR_PROJECT_NAME"
    fi
- export HUNSPELL_AFFIX_PATH=$HUNSPELL_DIR/en_US.aff
- export HUNSPELL_DICT_PATH=$HUNSPELL_DIR/en_US.dic
- |-
    case $TRAVIS_OS_NAME in
      linux)
        export SSL_CERT_DIR=/etc/ssl/certs
        ;;
      osx)
        security export \
            -k /System/Library/Keychains/SystemRootCertificates.keychain \
            -t certs \
            -p \
            > certs.pem
        export SSL_CERT_FILE=`pwd`/certs.pem
        ;;
    esac
- $shell ./test --gtest_color=yes

after_failure:
# https://jsteemann.github.io/blog/2014/10/30/getting-core-dumps-of-failed-travisci-builds/
- coreFile=$(find . -maxdepth 1 -name "*core*" | head -n 1)
- |-
    if [[ -f "$coreFile" ]]
    then
        gdb -c "$coreFile" test \
            -ex "thread apply all bt" \
            -ex "set pagination 0" \
            -batch
    fi
